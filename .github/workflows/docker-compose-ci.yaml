name: Docker Compose CI

on:
  push:
    branches: [main]
    paths:
      - "docker-compose.yaml"
      - "Dockerfile"
      - "streamlit_app/**"
      - "src/api/**"
      - "models/**"
      - "configs/**"
      - ".github/workflows/docker-compose-ci.yaml"
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  COMPOSE_FILE: docker-compose.yaml
  DOCKER_BUILDKIT: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create necessary directories
        run: |
          mkdir -p models/trained
          mkdir -p mlflow_data
          mkdir -p data/processed

      - name: Create dummy model files for CI
        run: |
          # Create dummy model and preprocessor files for CI testing
          echo "dummy model" > models/trained/house_price_model.pkl
          echo "dummy preprocessor" > models/trained/preprocessor.pkl
          echo "dummy config" > models/preprocessor.pkl

      - name: Build Docker images
        run: |
          docker compose build --no-cache

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Check service health
        run: |
          # Check if all services are running
          docker compose ps
          
          # Check MLflow health
          curl -f http://localhost:5555 || exit 1
          echo "✓ MLflow is running"
          
          # Check FastAPI health
          curl -f http://localhost:8000/health || exit 1
          echo "✓ FastAPI is running"
          
          # Check Streamlit health
          curl -f http://localhost:8501 || exit 1
          echo "✓ Streamlit is running"

      - name: Test FastAPI endpoints
        run: |
          # Test prediction endpoint with sample data
          curl -X POST "http://localhost:8000/predict" \
            -H "Content-Type: application/json" \
            -d '{
              "sqft": 1500,
              "bedrooms": 3,
              "bathrooms": 2,
              "location": "suburban",
              "year_built": 2000,
              "condition": "good"
            }' || true
          
          echo "API endpoint test completed"

      - name: Run integration tests
        run: |
          # Check if services can communicate
          docker compose exec -T fastapi curl -f http://mlflow:5000 || true
          echo "Service communication test completed"

      - name: Check logs for errors
        if: always()
        run: |
          echo "=== MLflow Logs ==="
          docker compose logs mlflow | tail -50
          
          echo "=== FastAPI Logs ==="
          docker compose logs fastapi | tail -50
          
          echo "=== Streamlit Logs ==="
          docker compose logs streamlit | tail -50

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push FastAPI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/fastapi:latest
            ${{ vars.DOCKERHUB_USERNAME }}/fastapi:${{ github.sha }}

      - name: Build and push Streamlit image
        uses: docker/build-push-action@v5
        with:
          context: ./streamlit_app
          file: ./streamlit_app/Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/streamlit:latest
            ${{ vars.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}

      - name: Create deployment info
        run: |
          echo "Images pushed successfully:"
          echo "- ${{ vars.DOCKERHUB_USERNAME }}/fastapi:${{ github.sha }}"
          echo "- ${{ vars.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}"
          echo "Deploy using: docker-compose up -d"